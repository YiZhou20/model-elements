/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * State of entire CTM */
public class FreewayCTMState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreewayCTMState\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* State of entire CTM\",\"fields\":[{\"name\":\"linkState\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"FreewayLinkState\",\"doc\":\"* State of one link at one time.\\n   *\\n   * May contain density, velocity, or both.\",\"fields\":[{\"name\":\"density\",\"type\":[\"double\",\"null\"]},{\"name\":\"velocity\",\"type\":[\"double\",\"null\"]}]}},\"doc\":\"map key is link id\"},{\"name\":\"t\",\"type\":{\"type\":\"record\",\"name\":\"DateTime\",\"doc\":\"milliseconds, absolute, since epoch, utc\",\"fields\":[{\"name\":\"milliseconds\",\"type\":\"long\"}]}}]}");
  /** map key is link id */
  @Deprecated public java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> linkState;
  @Deprecated public edu.berkeley.path.model_elements_base.DateTime t;

  /**
   * Default constructor.
   */
  public FreewayCTMState() {}

  /**
   * All-args constructor.
   */
  public FreewayCTMState(java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> linkState, edu.berkeley.path.model_elements_base.DateTime t) {
    this.linkState = linkState;
    this.t = t;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return linkState;
    case 1: return t;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: linkState = (java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState>)value$; break;
    case 1: t = (edu.berkeley.path.model_elements_base.DateTime)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'linkState' field.
   * map key is link id   */
  public java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> getLinkState() {
    return linkState;
  }

  /**
   * Sets the value of the 'linkState' field.
   * map key is link id   * @param value the value to set.
   */
  public void setLinkState(java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> value) {
    this.linkState = value;
  }

  /**
   * Gets the value of the 't' field.
   */
  public edu.berkeley.path.model_elements_base.DateTime getT() {
    return t;
  }

  /**
   * Sets the value of the 't' field.
   * @param value the value to set.
   */
  public void setT(edu.berkeley.path.model_elements_base.DateTime value) {
    this.t = value;
  }

  /** Creates a new FreewayCTMState RecordBuilder */
  public static edu.berkeley.path.model_elements_base.FreewayCTMState.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.FreewayCTMState.Builder();
  }
  
  /** Creates a new FreewayCTMState RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.FreewayCTMState.Builder newBuilder(edu.berkeley.path.model_elements_base.FreewayCTMState.Builder other) {
    return new edu.berkeley.path.model_elements_base.FreewayCTMState.Builder(other);
  }
  
  /** Creates a new FreewayCTMState RecordBuilder by copying an existing FreewayCTMState instance */
  public static edu.berkeley.path.model_elements_base.FreewayCTMState.Builder newBuilder(edu.berkeley.path.model_elements_base.FreewayCTMState other) {
    return new edu.berkeley.path.model_elements_base.FreewayCTMState.Builder(other);
  }
  
  /**
   * RecordBuilder for FreewayCTMState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreewayCTMState>
    implements org.apache.avro.data.RecordBuilder<FreewayCTMState> {

    private java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> linkState;
    private edu.berkeley.path.model_elements_base.DateTime t;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.FreewayCTMState.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.FreewayCTMState.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FreewayCTMState instance */
    private Builder(edu.berkeley.path.model_elements_base.FreewayCTMState other) {
            super(edu.berkeley.path.model_elements_base.FreewayCTMState.SCHEMA$);
      if (isValidValue(fields()[0], other.linkState)) {
        this.linkState = (java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState>) data().deepCopy(fields()[0].schema(), other.linkState);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.t)) {
        this.t = (edu.berkeley.path.model_elements_base.DateTime) data().deepCopy(fields()[1].schema(), other.t);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'linkState' field */
    public java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> getLinkState() {
      return linkState;
    }
    
    /** Sets the value of the 'linkState' field */
    public edu.berkeley.path.model_elements_base.FreewayCTMState.Builder setLinkState(java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState> value) {
      validate(fields()[0], value);
      this.linkState = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'linkState' field has been set */
    public boolean hasLinkState() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'linkState' field */
    public edu.berkeley.path.model_elements_base.FreewayCTMState.Builder clearLinkState() {
      linkState = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 't' field */
    public edu.berkeley.path.model_elements_base.DateTime getT() {
      return t;
    }
    
    /** Sets the value of the 't' field */
    public edu.berkeley.path.model_elements_base.FreewayCTMState.Builder setT(edu.berkeley.path.model_elements_base.DateTime value) {
      validate(fields()[1], value);
      this.t = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 't' field has been set */
    public boolean hasT() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 't' field */
    public edu.berkeley.path.model_elements_base.FreewayCTMState.Builder clearT() {
      t = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FreewayCTMState build() {
      try {
        FreewayCTMState record = new FreewayCTMState();
        record.linkState = fieldSetFlags()[0] ? this.linkState : (java.util.Map<java.lang.CharSequence,edu.berkeley.path.model_elements_base.FreewayLinkState>) defaultValue(fields()[0]);
        record.t = fieldSetFlags()[1] ? this.t : (edu.berkeley.path.model_elements_base.DateTime) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
