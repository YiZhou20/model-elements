/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
public class NodeRef extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NodeRef\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"fields\":[{\"name\":\"nodeId\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence nodeId;

  /**
   * Default constructor.
   */
  public NodeRef() {}

  /**
   * All-args constructor.
   */
  public NodeRef(java.lang.CharSequence nodeId) {
    this.nodeId = nodeId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nodeId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nodeId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nodeId' field.
   */
  public java.lang.CharSequence getNodeId() {
    return nodeId;
  }

  /**
   * Sets the value of the 'nodeId' field.
   * @param value the value to set.
   */
  public void setNodeId(java.lang.CharSequence value) {
    this.nodeId = value;
  }

  /** Creates a new NodeRef RecordBuilder */
  public static edu.berkeley.path.model_elements_base.NodeRef.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.NodeRef.Builder();
  }
  
  /** Creates a new NodeRef RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.NodeRef.Builder newBuilder(edu.berkeley.path.model_elements_base.NodeRef.Builder other) {
    return new edu.berkeley.path.model_elements_base.NodeRef.Builder(other);
  }
  
  /** Creates a new NodeRef RecordBuilder by copying an existing NodeRef instance */
  public static edu.berkeley.path.model_elements_base.NodeRef.Builder newBuilder(edu.berkeley.path.model_elements_base.NodeRef other) {
    return new edu.berkeley.path.model_elements_base.NodeRef.Builder(other);
  }
  
  /**
   * RecordBuilder for NodeRef instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NodeRef>
    implements org.apache.avro.data.RecordBuilder<NodeRef> {

    private java.lang.CharSequence nodeId;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.NodeRef.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.NodeRef.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing NodeRef instance */
    private Builder(edu.berkeley.path.model_elements_base.NodeRef other) {
            super(edu.berkeley.path.model_elements_base.NodeRef.SCHEMA$);
      if (isValidValue(fields()[0], other.nodeId)) {
        this.nodeId = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.nodeId);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'nodeId' field */
    public java.lang.CharSequence getNodeId() {
      return nodeId;
    }
    
    /** Sets the value of the 'nodeId' field */
    public edu.berkeley.path.model_elements_base.NodeRef.Builder setNodeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.nodeId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nodeId' field has been set */
    public boolean hasNodeId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nodeId' field */
    public edu.berkeley.path.model_elements_base.NodeRef.Builder clearNodeId() {
      nodeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public NodeRef build() {
      try {
        NodeRef record = new NodeRef();
        record.nodeId = fieldSetFlags()[0] ? this.nodeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
