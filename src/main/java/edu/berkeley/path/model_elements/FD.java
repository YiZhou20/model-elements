/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements;  
@SuppressWarnings("all")
/** Fundamental diagram on one link at one time */
public class FD extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FD\",\"namespace\":\"edu.berkeley.path.model_elements\",\"doc\":\"Fundamental diagram on one link at one time\",\"fields\":[{\"name\":\"freeFlowSpeed\",\"type\":\"double\"},{\"name\":\"freeFlowSpeedStdev\",\"type\":\"double\"},{\"name\":\"congestionWaveSpeed\",\"type\":\"double\"},{\"name\":\"congestionWaveSpeedStdev\",\"type\":\"double\"},{\"name\":\"capacity\",\"type\":\"double\"},{\"name\":\"capacityStdev\",\"type\":\"double\"},{\"name\":\"jamDensity\",\"type\":\"double\"},{\"name\":\"capacityDrop\",\"type\":\"double\"}]}");
  @Deprecated public double freeFlowSpeed;
  @Deprecated public double freeFlowSpeedStdev;
  @Deprecated public double congestionWaveSpeed;
  @Deprecated public double congestionWaveSpeedStdev;
  @Deprecated public double capacity;
  @Deprecated public double capacityStdev;
  @Deprecated public double jamDensity;
  @Deprecated public double capacityDrop;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return freeFlowSpeed;
    case 1: return freeFlowSpeedStdev;
    case 2: return congestionWaveSpeed;
    case 3: return congestionWaveSpeedStdev;
    case 4: return capacity;
    case 5: return capacityStdev;
    case 6: return jamDensity;
    case 7: return capacityDrop;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: freeFlowSpeed = (java.lang.Double)value$; break;
    case 1: freeFlowSpeedStdev = (java.lang.Double)value$; break;
    case 2: congestionWaveSpeed = (java.lang.Double)value$; break;
    case 3: congestionWaveSpeedStdev = (java.lang.Double)value$; break;
    case 4: capacity = (java.lang.Double)value$; break;
    case 5: capacityStdev = (java.lang.Double)value$; break;
    case 6: jamDensity = (java.lang.Double)value$; break;
    case 7: capacityDrop = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'freeFlowSpeed' field.
   */
  public java.lang.Double getFreeFlowSpeed() {
    return freeFlowSpeed;
  }

  /**
   * Sets the value of the 'freeFlowSpeed' field.
   * @param value the value to set.
   */
  public void setFreeFlowSpeed(java.lang.Double value) {
    this.freeFlowSpeed = value;
  }

  /**
   * Gets the value of the 'freeFlowSpeedStdev' field.
   */
  public java.lang.Double getFreeFlowSpeedStdev() {
    return freeFlowSpeedStdev;
  }

  /**
   * Sets the value of the 'freeFlowSpeedStdev' field.
   * @param value the value to set.
   */
  public void setFreeFlowSpeedStdev(java.lang.Double value) {
    this.freeFlowSpeedStdev = value;
  }

  /**
   * Gets the value of the 'congestionWaveSpeed' field.
   */
  public java.lang.Double getCongestionWaveSpeed() {
    return congestionWaveSpeed;
  }

  /**
   * Sets the value of the 'congestionWaveSpeed' field.
   * @param value the value to set.
   */
  public void setCongestionWaveSpeed(java.lang.Double value) {
    this.congestionWaveSpeed = value;
  }

  /**
   * Gets the value of the 'congestionWaveSpeedStdev' field.
   */
  public java.lang.Double getCongestionWaveSpeedStdev() {
    return congestionWaveSpeedStdev;
  }

  /**
   * Sets the value of the 'congestionWaveSpeedStdev' field.
   * @param value the value to set.
   */
  public void setCongestionWaveSpeedStdev(java.lang.Double value) {
    this.congestionWaveSpeedStdev = value;
  }

  /**
   * Gets the value of the 'capacity' field.
   */
  public java.lang.Double getCapacity() {
    return capacity;
  }

  /**
   * Sets the value of the 'capacity' field.
   * @param value the value to set.
   */
  public void setCapacity(java.lang.Double value) {
    this.capacity = value;
  }

  /**
   * Gets the value of the 'capacityStdev' field.
   */
  public java.lang.Double getCapacityStdev() {
    return capacityStdev;
  }

  /**
   * Sets the value of the 'capacityStdev' field.
   * @param value the value to set.
   */
  public void setCapacityStdev(java.lang.Double value) {
    this.capacityStdev = value;
  }

  /**
   * Gets the value of the 'jamDensity' field.
   */
  public java.lang.Double getJamDensity() {
    return jamDensity;
  }

  /**
   * Sets the value of the 'jamDensity' field.
   * @param value the value to set.
   */
  public void setJamDensity(java.lang.Double value) {
    this.jamDensity = value;
  }

  /**
   * Gets the value of the 'capacityDrop' field.
   */
  public java.lang.Double getCapacityDrop() {
    return capacityDrop;
  }

  /**
   * Sets the value of the 'capacityDrop' field.
   * @param value the value to set.
   */
  public void setCapacityDrop(java.lang.Double value) {
    this.capacityDrop = value;
  }

  /** Creates a new FD RecordBuilder */
  public static edu.berkeley.path.model_elements.FD.Builder newBuilder() {
    return new edu.berkeley.path.model_elements.FD.Builder();
  }
  
  /** Creates a new FD RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements.FD.Builder newBuilder(edu.berkeley.path.model_elements.FD.Builder other) {
    return new edu.berkeley.path.model_elements.FD.Builder(other);
  }
  
  /** Creates a new FD RecordBuilder by copying an existing FD instance */
  public static edu.berkeley.path.model_elements.FD.Builder newBuilder(edu.berkeley.path.model_elements.FD other) {
    return new edu.berkeley.path.model_elements.FD.Builder(other);
  }
  
  /**
   * RecordBuilder for FD instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FD>
    implements org.apache.avro.data.RecordBuilder<FD> {

    private double freeFlowSpeed;
    private double freeFlowSpeedStdev;
    private double congestionWaveSpeed;
    private double congestionWaveSpeedStdev;
    private double capacity;
    private double capacityStdev;
    private double jamDensity;
    private double capacityDrop;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements.FD.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements.FD.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FD instance */
    private Builder(edu.berkeley.path.model_elements.FD other) {
            super(edu.berkeley.path.model_elements.FD.SCHEMA$);
      if (isValidValue(fields()[0], other.freeFlowSpeed)) {
        this.freeFlowSpeed = (java.lang.Double) data().deepCopy(fields()[0].schema(), other.freeFlowSpeed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.freeFlowSpeedStdev)) {
        this.freeFlowSpeedStdev = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.freeFlowSpeedStdev);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.congestionWaveSpeed)) {
        this.congestionWaveSpeed = (java.lang.Double) data().deepCopy(fields()[2].schema(), other.congestionWaveSpeed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.congestionWaveSpeedStdev)) {
        this.congestionWaveSpeedStdev = (java.lang.Double) data().deepCopy(fields()[3].schema(), other.congestionWaveSpeedStdev);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.capacity)) {
        this.capacity = (java.lang.Double) data().deepCopy(fields()[4].schema(), other.capacity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.capacityStdev)) {
        this.capacityStdev = (java.lang.Double) data().deepCopy(fields()[5].schema(), other.capacityStdev);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.jamDensity)) {
        this.jamDensity = (java.lang.Double) data().deepCopy(fields()[6].schema(), other.jamDensity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.capacityDrop)) {
        this.capacityDrop = (java.lang.Double) data().deepCopy(fields()[7].schema(), other.capacityDrop);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'freeFlowSpeed' field */
    public java.lang.Double getFreeFlowSpeed() {
      return freeFlowSpeed;
    }
    
    /** Sets the value of the 'freeFlowSpeed' field */
    public edu.berkeley.path.model_elements.FD.Builder setFreeFlowSpeed(double value) {
      validate(fields()[0], value);
      this.freeFlowSpeed = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'freeFlowSpeed' field has been set */
    public boolean hasFreeFlowSpeed() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'freeFlowSpeed' field */
    public edu.berkeley.path.model_elements.FD.Builder clearFreeFlowSpeed() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'freeFlowSpeedStdev' field */
    public java.lang.Double getFreeFlowSpeedStdev() {
      return freeFlowSpeedStdev;
    }
    
    /** Sets the value of the 'freeFlowSpeedStdev' field */
    public edu.berkeley.path.model_elements.FD.Builder setFreeFlowSpeedStdev(double value) {
      validate(fields()[1], value);
      this.freeFlowSpeedStdev = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'freeFlowSpeedStdev' field has been set */
    public boolean hasFreeFlowSpeedStdev() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'freeFlowSpeedStdev' field */
    public edu.berkeley.path.model_elements.FD.Builder clearFreeFlowSpeedStdev() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'congestionWaveSpeed' field */
    public java.lang.Double getCongestionWaveSpeed() {
      return congestionWaveSpeed;
    }
    
    /** Sets the value of the 'congestionWaveSpeed' field */
    public edu.berkeley.path.model_elements.FD.Builder setCongestionWaveSpeed(double value) {
      validate(fields()[2], value);
      this.congestionWaveSpeed = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'congestionWaveSpeed' field has been set */
    public boolean hasCongestionWaveSpeed() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'congestionWaveSpeed' field */
    public edu.berkeley.path.model_elements.FD.Builder clearCongestionWaveSpeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'congestionWaveSpeedStdev' field */
    public java.lang.Double getCongestionWaveSpeedStdev() {
      return congestionWaveSpeedStdev;
    }
    
    /** Sets the value of the 'congestionWaveSpeedStdev' field */
    public edu.berkeley.path.model_elements.FD.Builder setCongestionWaveSpeedStdev(double value) {
      validate(fields()[3], value);
      this.congestionWaveSpeedStdev = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'congestionWaveSpeedStdev' field has been set */
    public boolean hasCongestionWaveSpeedStdev() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'congestionWaveSpeedStdev' field */
    public edu.berkeley.path.model_elements.FD.Builder clearCongestionWaveSpeedStdev() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'capacity' field */
    public java.lang.Double getCapacity() {
      return capacity;
    }
    
    /** Sets the value of the 'capacity' field */
    public edu.berkeley.path.model_elements.FD.Builder setCapacity(double value) {
      validate(fields()[4], value);
      this.capacity = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'capacity' field has been set */
    public boolean hasCapacity() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'capacity' field */
    public edu.berkeley.path.model_elements.FD.Builder clearCapacity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'capacityStdev' field */
    public java.lang.Double getCapacityStdev() {
      return capacityStdev;
    }
    
    /** Sets the value of the 'capacityStdev' field */
    public edu.berkeley.path.model_elements.FD.Builder setCapacityStdev(double value) {
      validate(fields()[5], value);
      this.capacityStdev = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'capacityStdev' field has been set */
    public boolean hasCapacityStdev() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'capacityStdev' field */
    public edu.berkeley.path.model_elements.FD.Builder clearCapacityStdev() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'jamDensity' field */
    public java.lang.Double getJamDensity() {
      return jamDensity;
    }
    
    /** Sets the value of the 'jamDensity' field */
    public edu.berkeley.path.model_elements.FD.Builder setJamDensity(double value) {
      validate(fields()[6], value);
      this.jamDensity = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'jamDensity' field has been set */
    public boolean hasJamDensity() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'jamDensity' field */
    public edu.berkeley.path.model_elements.FD.Builder clearJamDensity() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'capacityDrop' field */
    public java.lang.Double getCapacityDrop() {
      return capacityDrop;
    }
    
    /** Sets the value of the 'capacityDrop' field */
    public edu.berkeley.path.model_elements.FD.Builder setCapacityDrop(double value) {
      validate(fields()[7], value);
      this.capacityDrop = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'capacityDrop' field has been set */
    public boolean hasCapacityDrop() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'capacityDrop' field */
    public edu.berkeley.path.model_elements.FD.Builder clearCapacityDrop() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public FD build() {
      try {
        FD record = new FD();
        record.freeFlowSpeed = fieldSetFlags()[0] ? this.freeFlowSpeed : (java.lang.Double) defaultValue(fields()[0]);
        record.freeFlowSpeedStdev = fieldSetFlags()[1] ? this.freeFlowSpeedStdev : (java.lang.Double) defaultValue(fields()[1]);
        record.congestionWaveSpeed = fieldSetFlags()[2] ? this.congestionWaveSpeed : (java.lang.Double) defaultValue(fields()[2]);
        record.congestionWaveSpeedStdev = fieldSetFlags()[3] ? this.congestionWaveSpeedStdev : (java.lang.Double) defaultValue(fields()[3]);
        record.capacity = fieldSetFlags()[4] ? this.capacity : (java.lang.Double) defaultValue(fields()[4]);
        record.capacityStdev = fieldSetFlags()[5] ? this.capacityStdev : (java.lang.Double) defaultValue(fields()[5]);
        record.jamDensity = fieldSetFlags()[6] ? this.jamDensity : (java.lang.Double) defaultValue(fields()[6]);
        record.capacityDrop = fieldSetFlags()[7] ? this.capacityDrop : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
