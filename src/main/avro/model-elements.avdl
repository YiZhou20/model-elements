/**
 * Copyright (c) 2012 The Regents of the University of California.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

@namespace("edu.berkeley.path.model_elements_base")

/** 
 * Description of the config and state of our networks and related data.
 *
 * Note: all units in SI (meters, seconds, etc.) except where specified.
 */
protocol CC {
  
  /** milliseconds, absolute, since epoch, utc */
  record DateTime {
    long milliseconds;
  }
  
  /** milliseconds */
  record Duration {
    long milliseconds;
  }
  
  record Node {
    string id;
    string name;
    string type;
  }
  
  record Link {
    string id;
    string name;
    string type;
    
    double laneCount;
    double length;
    int laneOffset = 0;
    
    union { null, int } speedLimit;
    union { null, int } detailLevel;

    string beginId;
    string endId;
  }

  /**
   * Represents a traffic source. In the DB this is a link with
   * terminal node at the begin.
   */
  record Origin {
    string id;
    string name;

    /** id of the node that traffic flows into from the origin */
    string endId;
  }
  
  record Network {
    string id = "1";
    string name;
    union { null, string } description;

    array<Node> nodes = [];
    array<Link> links = [];
    array<Origin> origins = [];
  }
  
  /** Density on each link at a point in time */
  record DensityProfile {
    string id;
    
    /** map key is linkId */
    map<double> vehiclesPerMeter = {};
  }
  
  /** Velocity on each link at a point in time */
  record VelocityProfile {
    string id;
    
    /** map key is linkId */
    map<double> metersPerSecond = {};
  }
  
  /** Fundamental diagram on one link at one time */
  record FD {
    // ### TODO units?
    // ### TODO reconcile with DB
    
    double  freeFlowSpeed;
    double  freeFlowSpeedStdev;
    double  congestionWaveSpeed;
    double  congestionWaveSpeedStdev;
    double  capacity;
    double  capacityStdev;
    double  jamDensity;
    double  capacityDrop;
  }
  
  /** Fundamental diagrams on each link as time series */
  record FDProfile {
    double dt = 300.0;
    double startTime = 0.0;
    
    // ### TODO type
    // ### TODO noise
  
    /** map key is linkId, array is time series, as per dt and startTime. */
    map<array<FD>> fd = {};
  }
  
  /**
   * Demand time series at a link. The origin link ID is not stored
   * in this record, but as the map key in the DemandSet.profile.
   */
  record DemandProfile {
    /**
     * if null, this profile governs background flow, not OD flow.
     */
    union {null, string} destinationNetworkId;

    /**
     * in seconds; default is 0
     */
    union {null, double} startTime = 0.0;
    
    /**
     * in seconds; default is 300 seconds
     */
    union {null, double} sampleRate = 300.0;
    
    /**
     * demand scale factor
     */
    union {null, double} knob = 1.0;
    
    union {null, double} std_dev_add = 0.0;
    
    union {null, double} std_dev_mult = 1.0;
    
    /**
     * time series of flows;
     * map keys is vehTypeId;
     * array index is index in time series ("DEMAND_ORDER" in db)
     */
    map<array<double>> flow;
  }
  
  /**
   * Specification of demand time series across one or more networks,
   * for use in a scenario.
   */
  record DemandSet {
    string id;
    union {null, string} name;
    union {null, string} description;
    
    /**
     * map key is originLinkId
     */
    map<DemandProfile> profile;
  }

  /**
   * Split ratio time series at a node. The node ID is not stored
   * in this record, but as the map key in the SplitRatioSet.profile.
   */
  record SplitRatioProfile {
    /**
     * if null, this profile governs background flow, not OD flow.
     */
    union {null, string} destinationNetworkId;

    /**
     * in seconds; default is 0
     */
    union {null, double} startTime = 0.0;
    
    /**
     * in seconds; default is 300 seconds
     */
    union {null, double} sampleRate = 300.0;
    
    /**
     * time series of ratios;
     * map keys are: inLinkId, outLinkId, vehTypeId;
     * array index is index in time series ("RATIO_ORDER" in db)
     */
    map<map<map<array<double>>>> ratio;
  }
  
  /**
   * Specification of split ratio time series across one or more networks,
   * for use in a scenario.
   */
  record SplitRatioSet {
    string id;
    union {null, string} name;
    union {null, string} description;
    
    /**
     * map key is nodeId
     */
    map<SplitRatioProfile> profile;
  }
  
  // ### TODO Controllers
  
  /**
   * A scenario represents the state of the world now and projected
   * into the future, to the extent that can be known in advance.
   *
   * The configuration that belongs in a scenario and the objects that it
   * contains are just those parameters that make an assertion about the 
   * world, an assertion which is observable, and verifiable. So, for example,
   * choice of CTM algorithm does not belong here, but FD parameters do,
   * and signal control algorithms do. (The CTM choice should be in the
   * Context.)
   */
  record Scenario {
    string id;
    string name;
    union { null, string } description;
    
    array<Network> networks = [];
    
    DensityProfile initialDensityProfile = null;
    VelocityProfile initialVelocityProfile = null;
    FDProfile fdProfile = null;
    DemandSet demandSet = null;
    SplitRatioSet splitratioSet = null;
  }
  
  /**
   * Context and Run Config section
   *
   * Configuration that applies to one run or a group of runs.
   *
   * These objects correspond to the TBD Run tables.
   */
  
  record EnKFParams {
    int n_ensembles;
  }
  
  enum RunMode {
    HISTORICAL, LIVE
  }
  
  enum CTMType {
    DENSITY, VELOCITY, FUSION
  }

  /**
   * Static configuration of a set of freeway runs.
   *
   * The parameters encapsulated here are separate from Scenario inputs
   * in that they express *how* the run is modeled and executed,
   * rather than *what* is modeled.
   *
   * These parameters are used by the Context subclasses.
   *
   * Note that a context does not include a scenario. Scenarios are read
   * dynamically using a ScenarioSource.
   */
  record FreewayContextConfig {
    string        id;
    string        name;

    RunMode       runMode;
    EnKFParams    enkfParams;
    CTMType       ctmType;
    
    Duration      dtOutput;
    Duration      dt;
    
    DateTime      timeBegin;
    DateTime      timeEnd;
  }
  
  /**
   * Encapsulates a single run of a process.
   */
  record ProcessConfig {
    string        host;
    long          pid;
    
    /** Note: wall clock time on host, not world time or sim time */
    DateTime      timeBegin;
    DateTime      timeEnd;
  }
  
  /**
   * Represents a single execution of the freeway model.
   *
   * Parameters here supplement the Context config with additional per-run
   * config.
   *
   * The FreewayRun id should be in one-to-one correspondence with actual
   * process executions on a host. If you run again with the same parameters
   * then the id should be different. Output data references this id.
   */
  record FreewayEstimationRunConfig {
    string        id;
    string        name;
    
    /** Refers to the FreewayContext for this run (among others) */
    string        contextId;
    
    // to add?
    // ensemble ID?
    
    array<long>   seeds;
    
    ProcessConfig process; 
  }
  
  record FreewayForecastRunConfig {
    string        id;
    string        name;
    
    /** Refers to the FreewayContext for this run (among others) */
    string        contextId;
    
    array<long>   seeds;
    
    ProcessConfig process; 
  }

  record SimulationRunConfig {
    string        id;
    string        name;
  }
  
  record CalibrationRunConfig {
    string        id;
    string        name;
  }
  
  record ImputationRunConfig {
    string        id;
    string        name;
  }

  /**
   * State of one link at one time.
   *
   * May contain density, velocity, or both.
   */
  record FreewayLinkState {
    union { double, null } density;
    union { double, null } velocity;
  }

  /**
   * State of entire CTM
   */
  record FreewayCTMState {
    /** map key is link id */
    map<FreewayLinkState> linkState;
    
    /** map key is origin id */
    map<double> queueLength;
    
    DateTime t;
  }

  /**
   * State of ensemble CTMs in an ordered list.
   */
  record FreewayCTMEnsembleState {
    /** one entry per CTM */
    array<FreewayCTMState> ensembleState;
    
    /** map key is link id
     *
     * used by FreewayReporterBlock? */
    map<double> quality;
    // ### TODO call this confidence?
  }
}
