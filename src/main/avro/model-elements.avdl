/**
 * Copyright (c) 2012 The Regents of the University of California.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

@namespace("edu.berkeley.path.model_elements_base")

// ## TODO use imports to break up this file:
// ## import idl "foo.avdl";
// ## import schema "foo.avsc";

/** 
 * Description of the config and state of our networks and related data.
 *
 * Note: all units in SI (meters, seconds, etc.) except where specified.
 */
protocol CC {
  
  /** milliseconds, absolute, since epoch, utc */
  record DateTime {
    long milliseconds;
  }
  
  /** milliseconds */
  record Duration {
    long milliseconds;
  }
  
  record Point {
    double latitude = 0.0;
    double longitude = 0.0;
  }

  record Node {
    string id;
    string name;
    string type;
    Point point;
  }
  
  record Link {
    string id;
    string name;
    string type;
    
    union { null, double } laneCount;
    union { null, double } length;
    
    /**
     * index of the first lane of this link in case the road is
     * divided into paralell links.
     */
    union { null, int } laneOffset;
    union { null, double } speedLimit;
    union { null, int } detailLevel;

    string beginId;
    string endId;

    array<Point> points;
  }

  record Network {
    string id;
    string name;
    union { null, string } description;
    union { null, string } projectId;

    array<Node> nodes = [];
    array<Link> links = [];

    long modstamp;
  }
  
  /**
   * Density on each link at a point in time
   */
  record DensityMap {
    /** map key is linkId */
    map<double> vehiclesPerMeter = {};
    // ## should this break down by destinationNetworkId and vehTypeId ?
  }
  
  record DensitySet {
    string id;
    string name;
    union { null, string } description;
    union { null, string } projectId;
    
    DensityMap density;
  }
  
  /**
   * Velocity on each link at a point in time
   */
  record VelocityMap {
    /** map key is linkId */
    map<double> metersPerSecond = {};
    // ## should this break down by destinationNetworkId and vehTypeId ?
  }
  
  record VelocitySet {
    string id;
    string name;
    union { null, string } description;
    union { null, string } projectId;
    
    VelocityMap velocity;
  }
  
  /**
   * Referenced by FDSet to indicate the way the contained FDs should
   * be interpreted.
   */
  record FDType {
    string id;
    union {null, string} name;
    union {null, string} description;
  }
  
  /**
   * Fundamental diagram parameters on one link at one time.
   * Flow and density values are per lane in SI units.
   */
  record FD {
    union {null, double} freeFlowSpeed;
    union {null, double} criticalSpeed;
    union {null, double} congestionWaveSpeed;
    union {null, double} capacity;
    union {null, double} jamDensity;
    union {null, double} capacityDrop;
    union {null, double} freeFlowSpeedStd;
    union {null, double} congestionWaveSpeedStd;
    union {null, double} capacityStd;
  }
  
  /**
   * FD time series at a link. The link ID is not stored
   * in this record, but as the map key in the FDSet.profile.
   */
  record FDProfile {
    /**
     * in seconds; default is 0
     */
    union {null, double} startTime = 0.0;
    
    /**
     * in seconds; default is 300 seconds
     */
    union {null, double} sampleRate = 300.0;

    /**
     * time series of FDs;
     * array index is index in time series ("DIAG_ORDER" in db)
     */
    array<FD> fd;
  }

  /**
   * Specification of Fundamental diagram time series across one or more
   * networks, for use in a scenario.
   */
  record FDSet {
    string id;
    union {null, string} name;
    union {null, string} description;
    union { null, string } projectId;
    
    FDType type;
    
    /**
     * map key is linkId
     */
    map<FDProfile> profile;

    long modstamp;
  }
  
  /**
   * Used to feed a per-timestep "drip" input to freeway model.
   * This is sliced off of FDSet at a given time.
   *
   * Not part of Scenario; can be used interchangeably for
   * real-time input or for sliced up profiles from a scenario.
   */
  record FDMap {
    /**
     * map of FDs at a given time;
     * map key is linkId
     */
    map<FD> fd;
  }

  /**
   * Demand time series at a link. The origin link ID is not stored
   * in this record, but as the map key in the DemandSet.profile.
   */
  record DemandProfile {
    /**
     * if null, this profile governs background flow, not OD flow.
     */
    union {null, string} destinationNetworkId;

    /**
     * in seconds; default is 0
     */
    union {null, double} startTime = 0.0;
    
    /**
     * in seconds; default is 300 seconds
     */
    union {null, double} sampleRate = 300.0;
    
    /**
     * demand scale factor
     */
    union {null, double} knob = 1.0;
    
    union {null, double} stdDevAdd = 0.0;
    
    union {null, double} stdDevMult = 1.0;
    
    /**
     * time series of flows;
     * map keys is vehTypeId;
     * array index is index in time series ("DEMAND_ORDER" in db)
     */
    map<array<double>> flow;
  }
  
  /**
   * Specification of demand time series across one or more networks,
   * for use in a scenario.
   */
  record DemandSet {
    string id;
    union {null, string} name;
    union {null, string} description;
    union { null, string } projectId;
    
    /**
     * map key is originLinkId
     */
    map<DemandProfile> profile;

    long modstamp;
  }
  
  /**
   * Used to feed a per-timestep "drip" input to freeway model.
   * This is sliced off of DemandSet at a given time.
   *
   * Not part of Scenario; can be used interchangeably for 
   * real-time input or for sliced up profiles from a scenario.
   */
  record DemandMap {
    /**
     * map of flows at a given time;
     * map keys are: originLinkId, vehTypeId;
     */
    map<map<double>> flow;
    
    // ## does this need destinationNetworkId as another map key?
  }

  /**
   * Split ratio time series at a node. The node ID is not stored
   * in this record, but as the map key in the SplitRatioSet.profile.
   */
  record SplitRatioProfile {
    /**
     * if null, this profile governs background flow, not OD flow.
     */
    union {null, string} destinationNetworkId;

    /**
     * in seconds; default is 0
     */
    union {null, double} startTime = 0.0;
    
    /**
     * in seconds; default is 300 seconds
     */
    union {null, double} sampleRate = 300.0;
    
    /**
     * time series of ratios;
     * map keys are: inLinkId, outLinkId, vehTypeId;
     * array index is index in time series ("RATIO_ORDER" in db)
     */
    map<map<map<array<double>>>> ratio;
  }
  
  /**
   * Specification of split ratio time series across one or more networks,
   * for use in a scenario.
   */
  record SplitRatioSet {
    string id;
    union {null, string} name;
    union {null, string} description;
    union { null, string } projectId;
    
    /**
     * map key is nodeId
     */
    map<SplitRatioProfile> profile;

    long modstamp;
  }
  
  /**
   * Used to feed a per-timestep "drip" input to freeway model.
   * This is sliced off of SplitRatioSet at a given time.
   *
   * Not part of Scenario; can be used interchangeably for 
   * real-time input or for sliced up profiles from a scenario.
   */
  record SplitRatioMap {
    /**
     * map of ratios at a given time;
     * map keys are: nodeId, inLinkId, outLinkId, vehTypeId;
     */
    map<map<map<map<double>>>> ratio;
    
    // ## does this need destinationNetworkId as another map key?
  }

  /**
   * Sensor that can describe loop detector, magnetic detector, TMC,
   * camera, radar, etc.
   */
  record Sensor {
    /**
     * "Loop", etc. Translated to numeric type in the DB.
     */
    string type;

    /**
     * ID of original detector, e.g. VDS ID
     */
    union {null, string} entityId;

    /**
     * data feed associated with this sensor
     */
    union {null, string} measurementFeedId;

    string linkId;
    double linkOffset = 0;
    double laneNum = 1;

    /**
     * healthy by default
     */
    double healthStatus = 1;
  }

  /**
   * Set of sensors residing on links in potentially multiple networks.
   */
  record SensorSet {
    string id;
    union {null, string} name;
    union {null, string} description;

    union { null, string } projectId;
    
    array<Sensor> sensors;

    long modstamp;
  }
   
  
  // ### TODO Controllers
  
  record Project {
    string id;
    string name;
    union { null, string } description;

    long modstamp;
  }
  
  /**
   * A scenario represents the state of the world now and projected
   * into the future, to the extent that can be known in advance.
   *
   * The configuration that belongs in a scenario and the objects that it
   * contains are just those parameters that make an assertion about the 
   * world, an assertion which is observable, and verifiable. So, for example,
   * choice of CTM algorithm does not belong here, but FD parameters do,
   * and signal control algorithms do. (The CTM choice should be in the
   * Context.)
   */
  record Scenario {
    string id;
    string name;
    union { null, string } description;
    union { null, string } projectId;
    
    array<Network> networks = [];
    
    DensitySet initialDensity = null;
    VelocitySet initialVelocity = null;
    FDSet fdSet = null;
    DemandSet demandSet = null;
    SplitRatioSet splitratioSet = null;
    SensorSet sensorSet = null;

    long modstamp;
  }
  
  /**
   * Context and Run Config section
   *
   * Configuration that applies to one run or a group of runs.
   *
   * These objects correspond to the TBD Run tables.
   */
  
  record EnKFParams {
  
  	// which implementation of EnKF to use (blas vs jama, local vs global)
  	string enkfType;
  
    // how often to run EnKF, should be integer multiple of CTM time step in RunConfig
    Duration dtEnKF;        
        
    // PeMS loop detector data
    boolean includePeMS;
    double pemsNoiseMean;
    double pemsNoiseStdev;
    array<int> PemsBlackList;
    
    // accept map-matched probe measurements only if they have at least this probability assigned by PIF
    double probeProbabilityThreshold;
    
    // Navteq GPS probe data
    boolean includeNavteq;
    double navteqNoiseMean;
    double navteqNoiseStdev;
    double navteqPercentage;
    
    // Telenav GPS probe data
    boolean includeTelenav;
    double telenavNoiseMean;
    double telenavNoiseStdev;
    double telenavPercentage;
    
    // localized-EnKF approximation
    boolean useLocalization;
    double localizationDistance;
        
  }
  
  /**
   * State of one link at one time.
   *
   * May contain density, velocity, or both.
   */
  record FreewayLinkState {
    union { double, null } density;
    union { double, null } velocity;
  }
  
  /**
   * In- and out-flow state of one link at one time.
   *
   * The in- and out-flows are a quantity of interest computed by a CTM,
   * though not needed for either estimation of future time steps of a CTM.
   */
  record FreewayLinkFlowState {
    double inFlow;
    double outFlow;
  }

  /**
   * State of entire CTM, comprising:
   * state of each link,
   * state of each origin queue, and
   * optionally the in- and out-flows of each link.
   */
  record FreewayCTMState {
    /** map key is link id */
    map<FreewayLinkState> linkState;
    
    /** map key is origin link id */
    map<double> queueLength;
    
    /** map key is link id */
    union {null, map<FreewayLinkFlowState>} linkFlowState;
  }

  /**
   * State of ensemble CTMs in an ordered list.
   */
  record FreewayCTMEnsembleState {
    /** one entry per CTM */
    array<FreewayCTMState> ensembleState;
    
    DateTime t; // ## rename "time" for consistency
    
    /** map key is link id
     *
     * used by FreewayReporterBlock? */
    union {null, map<double>} quality;
    // ### TODO call this confidence?
  }
  
  record FreewayCTMReport {
    long runId;
    string networkId;
    
    /** Model time, of course */
    DateTime time;
    
    FreewayCTMState mean;
    FreewayCTMState stdDev;
    FDMap fd;
   
    /* whether this is a full report including flow stats (after a CTM step),
     * or not (after an EnKF step)
     */
    boolean includesFlows;
      
}
  
  record FreewayCTMEnsembleReport {
    long runId;
    string networkId;

    FreewayCTMEnsembleState ensembleState;
  }
  
  /**
   * PeMS sensor datum as output by PeMS filter, for a specific
   * station and time.
   */
  record PeMS {
    long vdsId;
    DateTime timeMeasured;
    union { double, null } flow;
    union { double, null } density;
    union { double, null } densityError;
    union { double, null } speed;
    union { double, null } speedError;
    union { double, null } freeFlowSpeed;
    union { double, null } funcLoopFact;
    array<union { double, null }> gFactorLane;
  }
  
  /**
   * PeMS sensor data map, organized by VDS.
   */
  record PeMSMap {
    /**
     * Key is VDS id. Represents the state of the sensors at
     * one point in time.
     */
    map<PeMS> pems;
  }

  /**
   * PeMS sensor data profile. Represents the time history of
   * one sensor.
   */
  record PeMSProfile {
    array<PeMS> pems;
  }

  /**
   * PeMS sensor data set, organized as a time-series
   * of maps. This makes sense because filtered pems data
   * is generated at multiples of 30 seconds: 00:00, 00:30, ...
   */
  record PeMSSet {
    array<PeMSMap> pemsMap;
  }

  /**
   * PeMS sensor (the VDS station info, rather than the sensor data).
   */
  record PeMSStation {
    long      Id; // ### should be id
    int       fwyNum;
    string    direction;
    int       district;
    string    county;
    string    city;
    double    statePostmile;
    double    absPostmile;
    Point     point;
    double    detectorLength;
    string    detectorType;
    string    detectorName;
    int       laneCount;
    
    array<string> userId;
    // ## TODO geom
  }
  
  /**
   * Used in both the 5 minute and 1 hour case for per-lane
   * and per-station aggregated data, and in the 1 day case
   * for per-station aggregated data.
   **/
  record PeMSAggregate {
    union { long, null }    samples;
    union { double, null }  flow;
    union { double, null }  avgOccupancy;
    union { double, null }  avgSpeed;
    union { double, null }  observed;
  }
  
  /**
   * Represents both the 5 minute and 1 hour aggregated data. If delay map
   * is present, then it represents a daily aggregate.
   **/
  record PeMSStationAggregate {
    long vdsId;
    DateTime timeMeasured;
    
    /**
     * Aggregated at this station, across lanes.
     **/
    PeMSAggregate total;
    
    /**
     * Aggregated by lane at this station.
     * Field is null for 1 day aggregates.
     **/
    union { array<PeMSAggregate>, null } byLane;
    
    /**
     * Average delay over the station length, for a threshold speed.
     * Keys are speeds in mph: "35", "40", ... "60".
     * Field is null for 5 minute aggregates.
     **/
    union { map<double>, null } delay;
  }

  /**
   * One data point in the output of the Path Inference Filter.
   *
   * This record is designed to hold one of the results of a query 
   * by run_id, network_id, link_id, and time interval. Hence the record
   * itself contains none of those, which the caller should keep track of.
   * (Or maybe we should have a PifProbeCoordSet to do that.)
   **/
  record PifProbeCoord {
    /**
     * time of measurement
     **/
    DateTime  time;
    
    /**
     * offset, in meters, in the direction of travel, in the queried link.
     **/
    double offset;
    
    /**
     * measured speed, in meters per second
     **/
    double speed;
    
    /**
     * probability that this point was placed correctly, in the range 0..1.
     **/
    double probability;
  }
  
  
  /**
   * Configuration of a freeway run.
   * Includes algorithm parameters for CTM & EnKF,
   * start/stop time etc,
   * and input/output parameters such as where to write reports to.
   */
  record RunConfig {
    string        id;
    string        name;

    // historical or live mode
    string        runMode;
    
	// forecast (CTM) or estimation (CTM + EnKF)
    string        workflow;
    
    string        ctmType;
    int           ensembleSize;    
    double        additiveModelNoiseMean;
    double        additiveModelNoiseStdDev;
    
    // velocity function (fundamental diagram)
    string        fdType;
    double        additiveVelocityFunctionNoiseMean;
    double        additiveVelocityFunctionNoiseStdDev;           
    
    EnKFParams    enkfParams;
    
    // reporting
    Duration      dtOutput;
    boolean		reportStatisticsAfterCTM;
    boolean		reportEnsembleAfterCTM;
    boolean		reportStatisticsAfterEnKF;
    boolean		reportEnsembleAfterEnKF;
    boolean		reportToDB;
    boolean		reportToDirectory;
    string		reportDirectory = "";
    
    // CTM time step, the smallest time step
    Duration      dtCTM;    
    
    DateTime      timeBegin;
    DateTime      timeEnd;
    
    // how long LIVE mode should try to lag behind real-time
    Duration		liveModeLag;
    
    // optional override of the PeMS sensor set in the Scenario
    union {null, SensorSet}     sensorSet;
    
    // initial condition: specify either a single state, a whole ensemble, or none
    union {null, FreewayCTMEnsembleState}     initialEnsembleState;
    union {null, FreewayCTMState}             initialState;
    // additive noise to apply to the initial state ensemble
    double                                    initialStateUncertainty = 0.0;
    // initial average density (as fraction of jam density) if no initial condition supplied
    double		initialDensityFraction;
    
  }

}
